In this application, a user can track their job applications. This is a Flask/Python backend with a React/TypeScript UI. I am running the backend from a docker container and the frontend out of a separate docker container.

I recently changed some things in my database, and I wanted to make sure those changes don't create a sort of a ripple effect across the codebase that I don't catch. I'm worried about also updating the backend interactions with the routes (auth_routes.py) as well as the interactions with the api service layer (api.ts). Can you make any changes on how I can go about this? I also want to go through the frontend file Login.tsx to check if everything is right, so let me know when we can do that. 

updated DB code:
from app.extensions import db
from flask_bcrypt import generate_password_hash, check_password_hash

class UserAuth(db.Model):
    __tablename__ = "auth_users" 
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(255), nullable=False, server_default="Unknown")
    email = db.Column(db.String(255), unique=True, nullable=False)
    password_hash = db.Column(db.String(255), nullable=False)

    def set_password(self, password):
        self.password_hash = generate_password_hash(password).decode("utf-8")

    def check_password(self, password):
        return check_password_hash(self.password_hash, password)

//attach login.tsx when needed
relevant code from api.ts
const AUTH_USER_URL = "http://localhost:5050/api/auth/user"

export const getAuthUserById = async (id: string): Promise<AuthUser> => {
  const url = `${AUTH_USER_URL}/${Number(id)}`;
  const response = await fetch(url, {
    method: "GET",
    headers: getAuthHeaders(),
  });

  if (response.status === 401) {
    localStorage.removeItem("token");
    localStorage.removeItem("userId");
    window.location.href = "/";
    throw new Error("Unauthorized — please log in again.");
  }

  if (!response.ok) {
    throw new Error("Failed to fetch user profile");
  }

  return response.json(); // ✅ response is AuthUser object, not wrapped
};
export const loginUser = async (email: string, password: string) => {
  const response = await fetch("http://localhost:5050/api/auth/login", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password }),
  });

  const data = await response.json();

  if (!response.ok) {
    throw new Error(data.error || "Login failed");
  }

  // ✅ Store token and ID
  localStorage.setItem("token", data.token);
  localStorage.setItem("userId", data.id);

  return data;
};

export const registerUser = async (email: string, password: string, name: string) => {
  const response = await fetch("http://localhost:5050/api/auth/register", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ email, password, name}),
  })

  const data = await response.json()

  if (!response.ok) {
    throw new Error(data.error || "Registration failed")
  }

  return data
}